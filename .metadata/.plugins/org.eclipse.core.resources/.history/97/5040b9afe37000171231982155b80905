package Flujos;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

public class escribiendo_PrintWriter_PrintStream {

	public static void salida_Pantalla_automatica_PrintStream(){
		/*
		 "OutputStreamWriter": Convertir un flujo de byte a caracteres
		 "Clase BufferedWriter": Permiten hacer escrituras sencillas a flujos de caracteres, 
        El uso sería:
         1- Convertir un flujo de byte a caracteres con la clase OutputStreamWriter
            Writer osw=new OutputStreamWriter(System.out);
         2- Hacer escrituras más faciles y sencilla apartir del flujos de caracteres que ya tenemos, con la clase BufferedReader
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
           
            BufferedWriter cuenta con métodos q son los que nos hacen facil el trabajo
		*/

        try {
     		Writer osw=new OutputStreamWriter(System.out);
	  		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
			bw.write("texto");
			bw.newLine();
		    bw.flush(); //Guardamos los cambios al fichero	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
       	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		/*
		 Escribir información
			Streams de Salida de Bytes(OutputStream)
				PrintStream: Buffer de salida es vaciado automaticamente los datos, y
				 			 se muestran de forma automatica
				PrintStream ps = new PrintStream( System.out ); 
				int a =2;    	
				fs.println(a); 
			  
			Streams de Salida de caracteres(Writer)
				PrintWriter: Escribe representaciones textuales de objetos java en un Writer.
							 Hay que forzar el vaciado del buffer de salida. 
							 Invocando el método flush
				PrintWriter fs = new PrintWriter( System.out ); 
				int a =2; 
				fs.println(a); 
				fs.flush(); 
		 * 
		 */

	}

}
