package Flujos;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;

public class Flujo_char_teclado_ficheroSImple {

	public static void lectura_FileReader_dificil(){
		/*
		   "clase FileReader": Lectura de un archivo 
         "clase StringBuffer": para guardar información
         						Las lecturas son más dificiles 
         						porque no cuenta con métodos que hagan facil el trabajo 
		 */
		  	FileReader entrada=null;
	        StringBuffer cadena=new StringBuffer();
	        try  {
	           entrada=new FileReader("src/Flujos/entrada.java");
	           int c;
	           while((c=entrada.read())!=-1){
	        	   cadena.append((char)c);
	           }
	           System.out.print(cadena);
	        }catch (IOException ex) {
	    	  System.out.println(ex);
		    }finally{  // una claúsula finally que siempre se llama independientemente de que se produzcan o no errores en el proceso de lectura/escritura.
		        if(entrada!=null){
		            try{
		                entrada.close();
		            }catch(IOException ex){}
		        }
		    }  
		
	}
	
	public static void lectura_BufferedReader_metodo_read(){
	/*
	   "clase FileReader": Lectura de un archivo 
	   "clase InputStreamReader": Convertir un flujo de byte a caracteres  
       "Clase BufferedReader": Permiten hacer lecturas sencillas desde flujos de caracteres.
				porque cuenta con métodos que hacen facil el trabajo
				  *Método  readLine():Lee una línea completa de texto. Retorna un string
				ademas cuenta con métodos estandar como
				 *Método read():Lee un solo caracter. Retorna un int q es el codigo ascii
        
        
        El uso sería:
         1- Convertir un flujo de byte a caracteres con la clase InputStreamReader
            Reader isr=new InputStreamReader(System.in);
         2- Hacer lecturas más faciles y sencilla apartir del flujos de caracteres que ya tenemos, con la clase BufferedReader
            BufferedReader br = new BufferedReader (isr);
         
	*/
	    
	        try {
				InputStreamReader  isr = new FileReader("src/Flujos/entrada.java");
				BufferedReader  br = new BufferedReader(isr) ;
				int codigo = br.read();
		        char caracter;
	
		        //mientras el código no sea -1 (EOF) continuo leyendo
		        while (codigo != -1) { 
		            caracter = (char) codigo; //casting
		            System.out.print(caracter);
		            codigo = br.read();
		        }
				
			} catch (FileNotFoundException ex) {
			    ex.printStackTrace();
			} catch (IOException ex2) {
			   ex2.printStackTrace();
			} 
		
	}
	
	public static void lectura_BufferedReader_facil_readline(){
	     /*
			       "clase FileReader": Lectura de un archivo 
			"clase InputStreamReader": Convertir un flujo de byte a caracteres  
		       "Clase BufferedReader": Permiten hacer lecturas sencillas desde flujos de caracteres.
		           Método  readLine(): Lee una línea completa de texto. Retorna un string
	       */
        
        try {
				InputStreamReader  isr = new FileReader("src/Flujos/entrada.java");
				BufferedReader  br = new BufferedReader(isr) ;
				String descripcion;
		        while ((descripcion=br.readLine())!=null) {
		            System.out.println(descripcion);
		        }
			} catch (FileNotFoundException ex) {
			    ex.printStackTrace();
			} catch (IOException ex2) {
			   ex2.printStackTrace();
			}
		
	}
	
	public static void salida_Pantalla(){
		/*
		 "OutputStreamWriter": Convertir un flujo de byte a caracteres
		 "Clase BufferedWriter": Permiten hacer escrituras sencillas a flujos de caracteres, 
        El uso sería:
         1- Convertir un flujo de byte a caracteres con la clase OutputStreamWriter
            Writer osw=new OutputStreamWriter(System.out);
         2- Hacer escrituras más faciles y sencilla apartir del flujos de caracteres que ya tenemos, con la clase BufferedReader
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
           
            BufferedWriter cuenta con métodos q son los que nos hacen facil el trabajo
		*/

		 
		
        try {
     		Writer osw=new OutputStreamWriter(System.out);
	  		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
			bw.write("texto");
			bw.newLine();
		    bw.flush(); //Guardamos los cambios al fichero	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
       	
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		escritura_archivo();
	}

}
